#!/bin/sh

prefix=/usr/local
opt=true
dbg=true
build_examples=true

sys=`uname -s | sed 's/MINGW.*/mingw/'`

if [ "$sys" = mingw ]; then
	mod_oculus=true
	mod_oculus_old=false
	mod_sball=false
else
	mod_oculus=false
	mod_oculus_old=true
	mod_sball=true
fi
mod_openvr=true
mod_openhmd=true

for arg; do
	case $arg in
	--prefix=*)
		prefix=`echo $arg | sed 's/--prefix=//'`
		;;

	--enable-opt)
		opt=true
		;;
	--disable-opt)
		opt=false
		;;
	--enable-dbg)
		dbg=true
		;;
	--disable-dbg)
		dbg=false
		;;

	--enable-module-*)
		eval mod_`echo $arg | sed 's/--enable-module-//'`=true
		;;
	--disable-module-*)
		eval mod_`echo $arg | sed 's/--disable-module-//'`=false
		;;

	--enable-examples)
		build_examples=true
		;;
	--disable-examples)
		build_examples=false
		;;

	--help)
		echo 'Usage: ./configure [options]'
		echo 'Options:'
		echo '  --prefix=<prefix>       installation prefix (default: /usr/local)'
		echo '  --enable-opt            enable code optimizations (default)'
		echo '  --disable-opt           disable code optimizations'
		echo '  --enable-dbg            enable debugging (default)'
		echo '  --disable-dbg           disable debugging'
		echo '  --enable-module-<name>  enable a VR module (see module list below)'
		echo '  --disable-module-<name> disable a VR module (see module list below)'
		echo '  --enable-examples       build example programs (default)'
		echo "  --disable-examples      don't build examples programs"
		echo '  --help                  print usage and exit'
		echo
		echo 'You may set CFLAGS and/or LDFLAGS when running configure, to pass extra'
		echo 'flags to the compiler and/or linker.'
		echo
		echo "List of optional VR modules:"
		echo '  oculus        Oculus SDK >= 1.x'
		echo '  oculus_old    Oculus SDK v0.5 (last version for GNU/Linux, DK1/DK2 only)'
		echo '  openvr        Valve OpenVR SDK'
		echo '  openhmd       OpenHMD library'
		echo '  sball         Spaceball (6dof) input module'
		echo
		exit 0
		;;
	esac
done

echo 'Generating Makefile ...'
echo '# generated by configure, do not edit. Edit Makefile.in instead' >Makefile
echo "PREFIX = $prefix" >>Makefile

[ -n "$CFLAGS" ] && echo "CFLAGS_cfg = $CFLAGS" >>Makefile
[ -n "$LDFLAGS" ] && echo "LDFLAGS_cfg = $LDFLAGS" >>Makefile

$opt && echo 'opt = -O3 -ffast-math' >>Makefile
$dbg && echo 'dbg = -g' >>Makefile

echo "sys = $sys" >>Makefile

printmod()
{
	if $2; then
		echo " [*] $1"
	else
		echo " [ ] $1"
	fi
}

echo 'Optional modules:'
printmod oculus $mod_oculus
if $mod_oculus; then
	mod_def="$mod_def -DUSE_MOD_OCULUS"
	mod_libs="$mod_libs -lLibOVR"
fi
printmod oculus_old $mod_oculus_old
if $mod_oculus_old; then
	mod_def="$mod_def -DUSE_MOD_OCULUS_OLD"
	mod_libs="$mod_libs -lOVR -ldl"
fi
printmod openvr $mod_openvr
if $mod_openvr; then
	# detect if we have the old version with vr->ResetSeatedZeroPose or a newer version
	# with vrchap->ResetZeroPose(...)
	cc -x c++ -o /dev/null $CFLAGS -c - 2>/dev/null <<EOF
#include <openvr/openvr.h>
void foo() { vr::VRChaperone()->ResetZeroPose(vr::TrackingUniverseSeated); }
EOF
	if [ $? != 0 ]; then
		mod_def="$mod_def -DMOD_OPENVR_OLDRECENTER"
	fi
	mod_def="$mod_def -DUSE_MOD_OPENVR"
	mod_libs="$mod_libs -lopenvr_api"
fi
printmod openhmd $mod_openhmd
if $mod_openhmd; then
	mod_def="$mod_def -DUSE_MOD_OPENHMD"
	mod_libs="$mod_libs -lopenhmd"
fi
printmod sball $mod_sball
if $mod_sball; then
	mod_def="$mod_def -DUSE_MOD_SBALL"
	mod_libs="$mod_libs -lspnav"
fi

echo "CFLAGS_mod = $mod_def" >>Makefile
echo "LDFLAGS_mod = $mod_libs" >>Makefile
echo >>Makefile

# output default rule
echo '.PHONY: all' >>Makefile
if $build_examples; then
	echo 'all: shared static examples' >>Makefile
else
	echo 'all: shared static' >>Makefile
fi

echo '# -------------' >>Makefile
echo >>Makefile
cat Makefile.in >>Makefile

# -------------------------------------
echo 'Generating reg_modules.cc ...'
out=reg_modules.cc

echo '// generated file, do not edit!' >$out
echo 'namespace goatvr {' >>$out
echo >>$out

for i in src/mod_*.cc; do
	name=`basename $i .cc`
	echo "void register_$name();" >>$out
done

echo >>$out
echo 'void register_modules()' >>$out
echo '{' >>$out
for i in src/mod_*.cc; do
	name=`basename $i .cc`
	echo "	register_$name();" >>$out
done
echo '}' >>$out
echo >>$out
echo '} // namespace goat' >>$out
